
struct set{
    int data[100];
    int data_count;
    long long hashValue;

    set()
    {
        data_count = 0;
    }

    set(const set &_i)
    {
        for( int i=0; i<_i.data_count; ++i )
            data[i]=_i.data[i];
    }

    void calculateHash()
    {
        hashValue = 0LL;
        for( int i=0; i<data_count; ++i )
        {
            hashValue = hashValue*31+data[i];
        }
    }

    bool operator==(const set &_i) const
    {
        return hashValue == _i.hashValue;
    }

    bool operator<(const set &_i) const
    {
        return hashValue == _i.hashValue;
    }

    bool insert(int _data)
    {
        int up = data_count, low = 0, mid;
        while(low<up)
        {
            mid = (up+low)>>1;
            if  ( _data>data[mid] )
                low=mid+1;
            else if ( _data<data[mid] )
                up=mid;
            else
                return false;
        }
        data[data_count++] = _data;
        sort(data, data+data_count);
        return true;
    }

    int size()
    {
        return data_count;
    }

    void clear()
    {
        data_count = 0;
    }

    bool count(int _data)
    {
        int up = data_count, low = 0, mid;
        while(low<up)
        {
            mid = (up+low)>>1;
            if  ( _data>data[mid] )
                low=mid+1;
            else if ( _data<data[mid] )
                up=mid;
            else
                return true;
        }
        return false;
    }
};
